basePath: /v1
definitions:
  main.ActivationUserInvitations:
    properties:
      token:
        type: string
    type: object
  main.AddCurrencyInput:
    properties:
      code:
        type: string
      name:
        type: string
      symbol_url:
        type: string
    required:
    - code
    - name
    type: object
  main.LoginPayload:
    properties:
      email:
        type: string
      password:
        maxLength: 72
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  main.RegisterUserPayload:
    properties:
      email:
        type: string
      password:
        maxLength: 72
        minLength: 8
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  main.UpdateCurrencyInput:
    properties:
      code:
        type: string
      name:
        type: string
      symbol_url:
        type: string
    type: object
  main.UserWithToken:
    properties:
      activated:
        type: boolean
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      last_login:
        type: string
      role:
        $ref: '#/definitions/store.Role'
      role_id:
        type: integer
      token:
        type: string
      username:
        type: string
    type: object
  main.envelop:
    additionalProperties: {}
    type: object
  store.Role:
    properties:
      description:
        type: string
      id:
        type: integer
      level:
        type: integer
      role_name:
        type: string
    type: object
  store.User:
    properties:
      activated:
        type: boolean
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      last_login:
        type: string
      role:
        $ref: '#/definitions/store.Role'
      role_id:
        type: integer
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Exchanger Open API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Exchanger API
  version: "1.0"
paths:
  /currencies:
    get:
      consumes:
      - application/json
      description: get all currencies
      parameters:
      - description: Current page
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      - description: Sort
        in: query
        name: sort
        type: string
      - description: Search
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: List currencies
      tags:
      - currencies
    post:
      consumes:
      - application/json
      description: add currency detail
      parameters:
      - description: Add currency
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/main.AddCurrencyInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "409":
          description: Conflict
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Add currency
      tags:
      - currencies
  /currencies/{currencyID}:
    delete:
      consumes:
      - application/json
      description: delete currency by id
      parameters:
      - description: currency ID
        in: path
        name: currencyID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "409":
          description: Conflict
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete currency
      tags:
      - currencies
    get:
      consumes:
      - application/json
      description: get currency by id
      parameters:
      - description: Currency ID
        in: path
        name: currencyID
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get currency
      tags:
      - currencies
    patch:
      consumes:
      - application/json
      description: update currency by id
      parameters:
      - description: currency ID
        in: path
        name: currencyID
        required: true
        type: integer
      - description: update currency payload
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/main.UpdateCurrencyInput'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: update currency
      tags:
      - currencies
  /tokens/activate:
    put:
      consumes:
      - application/json
      description: Activate user by invitation token
      parameters:
      - description: Invitation token
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/main.ActivationUserInvitations'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Activate user account
      tags:
      - tokens
  /tokens/authentication:
    post:
      consumes:
      - application/json
      description: login user account and generate access token
      parameters:
      - description: Login payload
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/main.LoginPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.envelop'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Login user account
      tags:
      - tokens
  /users:
    post:
      consumes:
      - application/json
      description: register user
      parameters:
      - description: Register user payload
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/main.RegisterUserPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/main.UserWithToken'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "409":
          description: Conflict
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Register user
      tags:
      - users
  /users/{userID}:
    delete:
      consumes:
      - application/json
      description: delete user by id
      parameters:
      - description: user ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: get user by id
      parameters:
      - description: currency ID
        in: path
        name: userID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/store.User'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
      - ApiKeyAuth: []
      summary: Get user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
